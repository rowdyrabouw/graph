"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var router_1 = require("@angular/router");
var page_1 = require("ui/page");
var GraphComponent = (function () {
    function GraphComponent(router, page) {
        this.router = router;
        this.page = page;
    }
    GraphComponent.prototype.ngOnInit = function () {
        // console.log(platformModule.screen.mainScreen.widthPixels);
        this.aowAgeItem = this.aowAge.nativeElement;
        this.dragAgeItem = this.dragAge.nativeElement;
        this.dragTargetItem = this.dragTarget.nativeElement;
        this.dragGraphItem = this.draghGraph.nativeElement;
        this.dragGraphItem.setInlineStyle('margin-left: -200');
        this.positionAgeX = this.dragAgeItem.left;
        this.positionTargetY = this.dragTargetItem.top;
    };
    GraphComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        this.draghGraph.nativeElement.on('pan,tap', function (args) {
            switch (args.eventName) {
                case 'pan':
                    _this.onPanGraph(args);
                    break;
                case 'tap':
                    _this.onTapGraph(args);
                    break;
            }
        });
        this.dragAge.nativeElement.on('pan,tap', function (args) {
            switch (args.eventName) {
                case 'pan':
                    _this.onPanAge(args);
                    break;
                case 'tap':
                    _this.onTapAge(args);
                    break;
            }
        });
        this.dragTarget.nativeElement.on('pan,tap', function (args) {
            switch (args.eventName) {
                case 'pan':
                    _this.onPanTarget(args);
                    break;
                case 'tap':
                    _this.onTapAge(args);
                    break;
            }
        });
    };
    GraphComponent.prototype.ngOnDestroy = function () {
    };
    GraphComponent.prototype.onPanGraph = function (args) {
        if (args.state === 1) {
            this.prevDeltaXaow = 0;
            this.prevDeltaXage = 0;
            this.prevDeltaXtarget = 0;
            this.prevDeltaYtarget = 0;
            this.prevDeltaXgraph = 0;
            this.prevDeltaYgraph = 0;
        }
        else if (args.state === 2) {
            this.dragGraphItem.translateX += args.deltaX - this.prevDeltaXgraph;
            this.dragGraphItem.translateY = 0;
            this.aowAgeItem.translateX += args.deltaX - this.prevDeltaXaow;
            this.dragAgeItem.translateX += args.deltaX - this.prevDeltaXage;
            this.dragTargetItem.translateX += args.deltaX - this.prevDeltaXtarget;
            this.prevDeltaXaow = args.deltaX;
            this.prevDeltaXage = args.deltaX;
            this.prevDeltaXgraph = args.deltaX;
            this.prevDeltaYgraph = args.deltaY;
            this.prevDeltaXtarget = args.deltaX;
            this.prevDeltaYtarget = args.deltaY;
        }
        else if (args.state === 3) {
        }
    };
    GraphComponent.prototype.onPanTarget = function (args) {
        if (args.state === 1) {
            this.prevDeltaXtarget = 0;
            this.prevDeltaYtarget = 0;
        }
        if (args.state === 2) {
            this.dragTargetItem.translateX = 0;
            this.dragTargetItem.translateY += args.deltaY - this.prevDeltaYtarget;
            this.prevDeltaXtarget = 0;
            this.prevDeltaYtarget = args.deltaY;
        }
        else if (args.state === 3) {
            this.positionTargetY += args.deltaY;
            console.log('onPanTarget finished: recalculate, position: ' + this.positionTargetY);
        }
    };
    GraphComponent.prototype.onPanAge = function (args) {
        if (args.state === 1) {
            this.prevDeltaXage = 0;
            this.prevDeltaYage = 0;
        }
        if (args.state === 2) {
            this.dragAgeItem.translateX += args.deltaX - this.prevDeltaXage;
            this.dragAgeItem.translateY = 0;
            this.prevDeltaXage = args.deltaX;
            this.prevDeltaYage = args.deltaY;
        }
        else if (args.state === 3) {
            this.positionAgeX += args.deltaX;
            console.log('onPanAge finished: recalculate, position: ' + this.positionAgeX);
        }
    };
    GraphComponent.prototype.onTapGraph = function ($event) {
        alert('onTap: show zoom dialog');
    };
    GraphComponent.prototype.onTapAow = function ($event) {
        alert('onTapAow: show current aow age');
    };
    GraphComponent.prototype.onTapAge = function ($event) {
        alert('onTapAge: show current pension age');
    };
    GraphComponent.prototype.onTapTarget = function ($event) {
        alert('onTapTarget: show current target income');
    };
    return GraphComponent;
}());
__decorate([
    core_1.ViewChild("aowAge"),
    __metadata("design:type", core_1.ElementRef)
], GraphComponent.prototype, "aowAge", void 0);
__decorate([
    core_1.ViewChild("dragAge"),
    __metadata("design:type", core_1.ElementRef)
], GraphComponent.prototype, "dragAge", void 0);
__decorate([
    core_1.ViewChild("dragTarget"),
    __metadata("design:type", core_1.ElementRef)
], GraphComponent.prototype, "dragTarget", void 0);
__decorate([
    core_1.ViewChild("dragGraph"),
    __metadata("design:type", core_1.ElementRef)
], GraphComponent.prototype, "draghGraph", void 0);
GraphComponent = __decorate([
    core_1.Component({
        moduleId: module.id,
        selector: "graph",
        templateUrl: "graph.component.html"
    }),
    __metadata("design:paramtypes", [router_1.Router, page_1.Page])
], GraphComponent);
exports.GraphComponent = GraphComponent;
//# sourceMappingURL=data:application/json;base64,